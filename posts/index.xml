<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Nok</title>
    <link>https://nok3zy.github.io/posts/</link>
    <description>Recent content in Posts on Nok</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Feb 2023 18:51:21 +0900</lastBuildDate><atom:link href="https://nok3zy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CICD Pipeline 구축하기</title>
      <link>https://nok3zy.github.io/posts/cicd-pipeline-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 25 Feb 2023 18:51:21 +0900</pubDate>
      
      <guid>https://nok3zy.github.io/posts/cicd-pipeline-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/</guid>
      <description>Harness를 CICD 파이프라인 구축하면서 있었던 일들을 정리해본다.
CICD 파이프라인을 구축해보면서 고민했던 내용을 정리하는 느낌으로 작성하는 것이므로 하네스와 관련된 것은 최대한 제외했다.
CICD가 무엇일까 파이프라인 구성하기 인프라 요구사항 파이프라인 만들기 CICD가 무엇일까 🔗CICD Pipeline을 새로 구축하면서,CICD라는 의미를 알고는 있지만 정확히 몰랐다. 그냥 뭐 테스트하고 자동으로 배포하고 그런것이 아닐까?
CI(Continuous Integration)은 어플리케이션에 적용한 사항이 병합되었을 때, 자동으로 테스트하면서 잘 적용되었는지를 확인하는 작업을 자동화한 것을 의미한다. 간단히 말해서, 기존코드와 신규코드에 충돌이 있는지 확인하는 과정이라고 생각하면 될 것 같다.</description>
    </item>
    
    <item>
      <title>Spring Test 개선</title>
      <link>https://nok3zy.github.io/posts/spring-test-%EA%B0%9C%EC%84%A0/</link>
      <pubDate>Sun, 22 Jan 2023 22:32:19 +0900</pubDate>
      
      <guid>https://nok3zy.github.io/posts/spring-test-%EA%B0%9C%EC%84%A0/</guid>
      <description>기능을 개발하면서 제대로 동작하는 지는 테스트를 돌리면서 확인해야 한다. 단위테스트가 제대로 동작하는 것을 확인하고, 스테이징 환경에서도 의도된 대로 동작하는 것을 확인하고 깃에 푸시를 한다. 푸시를 하면 정해진 액션대로 CI를 기다려야 했다. 프로젝트에서 관리중인 코드가 굉장히 많기 때문에, 테스트 시간도 그에 비례해서 오래 걸릴 수 밖에 없었다. 그런데 이 시간이 생산성을 잡아먹는다고 생각이 들었다. 아 너무 오래걸리는데?
이미 KTLO list에도 레거시 모듈 청산이 있었기 때문에, 레거시부터 정리해나가야 겠다고 생각했다. 그래 필요없는 코드를 제거해보자.</description>
    </item>
    
    <item>
      <title>System Architecture</title>
      <link>https://nok3zy.github.io/posts/system-architecture/</link>
      <pubDate>Sat, 21 Jan 2023 20:59:03 +0900</pubDate>
      
      <guid>https://nok3zy.github.io/posts/system-architecture/</guid>
      <description>한 프로젝트를 처음부터 시작하면서 선택을 해야하는 순간이 많았다. 종종 어떤 것을 선택하시겠어요?라는 선택지가 나에게 주어졌고 나는 어리둥절하며 고민을 해야 했다. 어떤 것이 좋은 거지? 무엇이 옳은 거지?
그런 선택지들을 고르기 위해서는 시스템 아키텍처에 대한 이해가 필요했다. 그리고 전반적인 상황을 이해하기 위해서라도 공부를 해야만 했다.
좋은 인프라는 무엇일까 🔗질문에 대한 답은 명백하다. 장애에 대해 Robust하고 확장이 쉽고 관측도 편하며 비용이 적게드는 것이 가장 좋은 인프라이다. 하지만 그런 인프라는 존재하지 않는다. 비용을 많이 투자해야 성능이 좋게 나오는 법이다.</description>
    </item>
    
    <item>
      <title>Clean Architecture</title>
      <link>https://nok3zy.github.io/posts/clean-architecture/</link>
      <pubDate>Sun, 15 Jan 2023 21:49:24 +0900</pubDate>
      
      <guid>https://nok3zy.github.io/posts/clean-architecture/</guid>
      <description>클린 아키텍처가 뭐죠 🔗내가 클린 아키텍처를 고민해보기 시작한 것은 다른 팀으로 이동하고 나서부터다. 팀을 이동하면서 앞으로 내가 할 프로젝트의 첫 인상은 개발 언어도, 도메인도 다르고 멀티 모듈로 둘러쌓여 굉장히 복잡해 보였다. (물론 레거시도 많아서 더 복잡해보였다.)
&amp;ldquo;이 아키텍처는 클린 아키텍처에 기반해서 만들었어요.&amp;rdquo;
그 말에 바로 클린 아키텍처부터 읽었다. 이 구조를 이해하는 데 도움이 될 것이라고 생각했다. 그리고 좋은 책이라고 많이 들었기 때문에 고민없이 책을 읽게 되었다. 책에 적힌 모든 걸 한번에 이해할 수는 없었지만, 어떤 것을 말하고 싶은지는 이해를 할 수 있었다.</description>
    </item>
    
    <item>
      <title>2022년 회고</title>
      <link>https://nok3zy.github.io/posts/2022%EB%85%84-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sun, 01 Jan 2023 01:13:08 +0900</pubDate>
      
      <guid>https://nok3zy.github.io/posts/2022%EB%85%84-%ED%9A%8C%EA%B3%A0/</guid>
      <description>1. 개발자가 되었다. 🔗취업을 준비하면서 과연 내가 개발을 할 수 있을까 하는 생각에서 벗어날 수 없었다. 무엇을 공부해야 하는지, 준비해야하는 지 알고 있었지만 항상 부족하다고 느꼈다. 흔히들 말하는 코딩테스트와 프로젝트을 준비했지만 그렇게 경쟁력이 있다고 느껴지진 않았다.
코딩테스트를 준비하기로 한 첫번째 달에 매일 3문제씩 풀어서 한 달만에 100문제를 풀었다. 그리고 매일 적어도 한문제씩 1년을 풀었다. 그렇게 풀다보니 어떤 코딩테스트를 봐도 통과할 정도는 되었다.
하지만 문제는 프로젝트였다. 프로젝트를 한다고 했는데 어떻게 준비해야할지 몰랐고 한다고 했던 것들은 정말 봐주기 어려울 정도였다.</description>
    </item>
    
  </channel>
</rss>
